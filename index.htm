<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI News Assistant</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        // PASTE THE ENTIRE REACT CODE FROM THE ARTIFACT HERE
        import React, { useState, useRef, useEffect } from 'react';
import { Send, Newspaper, Loader2, Brain, Search, AlertCircle } from 'lucide-react';

export default function FreeNewsAI() {
  const [messages, setMessages] = useState([
    {
      role: 'assistant',
      content: 'üëã Hello! I\'m your FREE AI News & Learning Assistant!\n\n‚úÖ Get latest news from around the world\n‚úÖ Solve math and science problems\n‚úÖ Learn anything - I explain concepts clearly\n‚úÖ 100% FREE - No limits, no costs!\n\nWhat would you like to know?'
    }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [showApiSetup, setShowApiSetup] = useState(false);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    // Check if API key is saved
    const saved = localStorage.getItem('huggingface_api_key');
    if (saved) {
      setApiKey(saved);
    }
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const saveApiKey = () => {
    if (apiKey.trim()) {
      localStorage.setItem('huggingface_api_key', apiKey.trim());
      setShowApiSetup(false);
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: '‚úÖ API key saved! You\'re all set. Now ask me anything!'
      }]);
    }
  };

  const searchNews = async (query) => {
    try {
      // Using NewsAPI (free tier: 100 requests/day)
      const newsResponse = await fetch(
        `https://newsapi.org/v2/everything?q=${encodeURIComponent(query)}&sortBy=publishedAt&pageSize=5&apiKey=demo` // They provide a demo key
      );
      const newsData = await newsResponse.json();
      return newsData.articles || [];
    } catch (error) {
      console.error('News search error:', error);
      return [];
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage = input.trim();
    setInput('');
    
    setMessages(prev => [...prev, { role: 'user', content: userMessage }]);
    setIsLoading(true);

    try {
      // Check if it's a news query or problem-solving query
      const isNewsQuery = /news|latest|current|today|happening|update/i.test(userMessage);
      
      let responseText = '';

      if (isNewsQuery) {
        // Extract search terms
        const searchTerms = userMessage.replace(/what's|whats|tell me|about|the|latest|news|today/gi, '').trim();
        const articles = await searchNews(searchTerms || 'technology');
        
        if (articles.length > 0) {
          responseText = `üì∞ Here are the latest news articles:\n\n`;
          articles.slice(0, 3).forEach((article, i) => {
            responseText += `${i + 1}. **${article.title}**\n`;
            responseText += `   ${article.description || 'No description available'}\n`;
            responseText += `   üîó Source: ${article.source.name}\n`;
            responseText += `   üìÖ ${new Date(article.publishedAt).toLocaleDateString()}\n\n`;
          });
        } else {
          responseText = 'I couldn\'t find recent news on that topic. Try being more specific or check your internet connection.';
        }
      } else {
        // Use Hugging Face free API for problem-solving
        if (!apiKey) {
          setShowApiSetup(true);
          responseText = '‚ö†Ô∏è To solve problems and answer questions, I need a FREE Hugging Face API key. Click the setup button above to add it (takes 2 minutes, completely free!)';
        } else {
          const hfResponse = await fetch(
            'https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2',
            {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                inputs: `You are a helpful AI assistant. Answer this question clearly and accurately:\n\nQuestion: ${userMessage}\n\nAnswer:`,
                parameters: {
                  max_new_tokens: 500,
                  temperature: 0.7,
                  top_p: 0.95,
                  return_full_text: false
                }
              })
            }
          );

          const hfData = await hfResponse.json();
          
          if (hfData.error) {
            responseText = `‚ö†Ô∏è ${hfData.error}. The free API might be loading. Wait 20 seconds and try again, or check your API key.`;
          } else {
            responseText = hfData[0]?.generated_text || 'Sorry, I couldn\'t generate a response. Please try again.';
          }
        }
      }

      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: responseText
      }]);

    } catch (error) {
      console.error('Error:', error);
      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: '‚ùå Something went wrong. Please check your internet connection and try again.'
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-screen bg-gradient-to-br from-emerald-50 via-blue-50 to-purple-50">
      {/* Header */}
      <div className="bg-white shadow-lg border-b-4 border-emerald-500">
        <div className="max-w-5xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="bg-gradient-to-br from-emerald-500 to-blue-600 p-2.5 rounded-xl shadow-lg">
                <Brain className="w-7 h-7 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-emerald-600 to-blue-600 bg-clip-text text-transparent">
                  FREE AI Assistant
                </h1>
                <p className="text-sm text-slate-600">100% Free Forever ‚Ä¢ News ‚Ä¢ Problem Solver</p>
              </div>
            </div>
            <button
              onClick={() => setShowApiSetup(!showApiSetup)}
              className="px-4 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg text-sm font-medium transition-colors"
            >
              {apiKey ? '‚úÖ API Ready' : '‚öôÔ∏è Setup API'}
            </button>
          </div>

          {/* API Setup Panel */}
          {showApiSetup && (
            <div className="mt-4 p-4 bg-blue-50 border-2 border-blue-200 rounded-xl">
              <div className="flex items-start gap-3">
                <AlertCircle className="w-5 h-5 text-blue-600 mt-1 flex-shrink-0" />
                <div className="flex-1">
                  <h3 className="font-bold text-blue-900 mb-2">üÜì Get Your FREE API Key (2 minutes):</h3>
                  <ol className="text-sm text-blue-800 space-y-1 mb-3">
                    <li>1. Go to <a href="https://huggingface.co/join" target="_blank" className="underline font-medium">huggingface.co/join</a> (create free account)</li>
                    <li>2. Go to <a href="https://huggingface.co/settings/tokens" target="_blank" className="underline font-medium">Settings ‚Üí Access Tokens</a></li>
                    <li>3. Click "New token" ‚Üí Give it a name ‚Üí Create</li>
                    <li>4. Copy the token and paste below:</li>
                  </ol>
                  <div className="flex gap-2">
                    <input
                      type="password"
                      value={apiKey}
                      onChange={(e) => setApiKey(e.target.value)}
                      placeholder="Paste your Hugging Face token here..."
                      className="flex-1 px-3 py-2 border-2 border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <button
                      onClick={saveApiKey}
                      className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
                    >
                      Save
                    </button>
                  </div>
                  <p className="text-xs text-blue-600 mt-2">üîí Stored locally in your browser only. 100% safe!</p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto px-4 py-6">
        <div className="max-w-5xl mx-auto space-y-4">
          {messages.map((msg, idx) => (
            <div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-3xl rounded-2xl px-5 py-3 ${
                msg.role === 'user' 
                  ? 'bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg' 
                  : 'bg-white text-slate-800 shadow-md border border-slate-200'
              }`}>
                <div className="whitespace-pre-wrap text-sm leading-relaxed">{msg.content}</div>
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-white rounded-2xl px-5 py-3 shadow-md border border-slate-200">
                <div className="flex items-center gap-2">
                  <Loader2 className="w-4 h-4 animate-spin text-blue-600" />
                  <span className="text-sm text-slate-600">Thinking...</span>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Input */}
      <div className="border-t border-slate-200 bg-white shadow-xl">
        <div className="max-w-5xl mx-auto px-4 py-4">
          <div className="flex gap-3">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSubmit(e)}
              placeholder="Ask about news, solve problems, or learn anything..."
              className="flex-1 px-4 py-3 border-2 border-slate-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
              disabled={isLoading}
            />
            <button
              onClick={handleSubmit}
              disabled={isLoading || !input.trim()}
              className="bg-gradient-to-r from-emerald-600 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-emerald-700 hover:to-blue-700 disabled:from-slate-300 disabled:to-slate-400 transition-all shadow-lg font-medium"
            >
              {isLoading ? <Loader2 className="w-5 h-5 animate-spin" /> : <Send className="w-5 h-5" />}
            </button>
          </div>
          <div className="mt-2 flex gap-2 flex-wrap">
            {['Latest tech news', 'Solve: x¬≤ + 5x + 6 = 0', 'Explain AI', 'Business news today'].map(q => (
              <button
                key={q}
                onClick={() => setInput(q)}
                className="px-3 py-1 bg-slate-100 hover:bg-emerald-100 text-slate-700 text-xs rounded-lg transition-colors"
              >
                {q}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
        ReactDOM.createRoot(document.getElementById('root')).render(<FreeNewsAI />);
    </script>
</body>

</html>
